{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.24.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "polyethylene!",
  "docComment": "/**\n * A library for working with iterables and async iterables in a functional style, by transforming the iterations on the fly and getting results from them.\n *\n * @remarks\n *\n * The entry point for this library is the {@link Poly} namespace, and the main iterable classes are {@link PolySyncIterable} and {@link PolyAsyncIterable}.\n *\n * @packageDocumentation\n */\n",
  "name": "polyethylene",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "polyethylene!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!AsyncChunkingPredicate:type",
          "docComment": "/**\n * A function that receives an element (`elem`) of the iteration and the first and last element of a chunk, and returns a boolean value or a `Promise` to a boolean value representing whether `elem` should be added to the current chunk (if `true`) or be the start of a new chunk (if `false`)\n *\n * @param elem - An element of the iteration\n *\n * @param lastElem - The last element of the current chunk\n *\n * @param firstElem - The first element of the current chunk\n *\n * @typeParam T - The type of the iteration elements\n *\n * @returns A boolean value or a `Promise` to a boolean value representing whether `elem` should be added to the current chunk (`true`) or be the start of a new chunk (`false`)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AsyncChunkingPredicate<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, lastElem: T, firstElem: T) => boolean | "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AsyncChunkingPredicate",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!AsyncIndexedMapping:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and returns a different object or a `Promise` to a different object\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @typeParam U - The return type of the function\n *\n * @returns Some other value or a `Promise` to some other value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AsyncIndexedMapping<T, U> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => U | "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<U>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AsyncIndexedMapping",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!AsyncIndexedPredicate:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and returns a `boolean` value or a `Promise` to a `boolean` value.\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @returns A `boolean` value or a `Promise` to a `boolean` value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AsyncIndexedPredicate<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => boolean | "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AsyncIndexedPredicate",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!AsyncIndexedReducer:type",
          "docComment": "/**\n * A function that receives an accumulated result, an element of an iteration, and returns a new accumulated result or a promise to a new accumulated result for the next call or as a final return value.\n *\n * @param acc - The previously accumulated value\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the iteration elements\n *\n * @typeParam U - The type of the accumulated result\n *\n * @returns The new accumulated result or a promise to the new accumulated result\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AsyncIndexedReducer<T, U> = "
            },
            {
              "kind": "Content",
              "text": "(acc: U, item: T, index: number) => U | "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<U>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AsyncIndexedReducer",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!AsyncIndexedRunnable:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and either returns a `Promise` to nothing or doesn't return anything\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @returns a `Promise` to an ignored value or nothing\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AsyncIndexedRunnable<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => void | "
            },
            {
              "kind": "Reference",
              "text": "PromiseLike",
              "canonicalReference": "!PromiseLike:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AsyncIndexedRunnable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "polyethylene!AsyncIterableBuilder:class",
          "docComment": "/**\n * A class that helps with building an {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator AsyncIterable} from a non-structured source.\n *\n * In order to create the iteration, you must call the {@link AsyncIterableBuilder.value value}, {@link AsyncIterableBuilder.error error} and {@link AsyncIterableBuilder.done done} methods with appropriate arguments.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `AsyncIterableBuilder` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class AsyncIterableBuilder<T> implements "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "AsyncIterableBuilder",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!AsyncIterableBuilder#[Symbol.asyncIterator]:member(1)",
              "docComment": "/**\n * Allows this class to work as a regular `AsyncIterable<T>`\n *\n * @returns an async iterable that yields elements as determined by the calls to `this`' methods\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.asyncIterator",
                  "canonicalReference": "!SymbolConstructor#asyncIterator"
                },
                {
                  "kind": "Content",
                  "text": "](): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterator",
                  "canonicalReference": "!AsyncIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "[Symbol.asyncIterator]"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!AsyncIterableBuilder#done:member(1)",
              "docComment": "/**\n * Makes the underlying iterable finish the iteration.\n *\n * @remarks\n *\n * Any values that were given with {@link AsyncIterableBuilder.value value} will be yielded before the iteration ends.\n *\n * Calling {@link AsyncIterableBuilder.value value} or {@link AsyncIterableBuilder.error error} after calling this method or calling this method after calling {@link AsyncIterableBuilder.error error} will act as a no-op.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "done(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "done"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!AsyncIterableBuilder#error:member(1)",
              "docComment": "/**\n * Makes the underlying iterable throw the given `error` object.\n *\n * @remarks\n *\n * Any values that were given with {@link AsyncIterableBuilder.value value} will be yielded before the error is thrown.\n *\n * Calling {@link AsyncIterableBuilder.value value} or {@link AsyncIterableBuilder.done done} after calling this method or calling this method after calling {@link AsyncIterableBuilder.done done} will act as a no-op.\n *\n * @param error - The error to be thrown by the underlying iterable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "error"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!AsyncIterableBuilder#toPolyAsyncIterable:member(1)",
              "docComment": "/**\n * Get a {@link PolyAsyncIterable} that iterates the elements as determined by calls to `this` object's {@link AsyncIterableBuilder.value value}, {@link AsyncIterableBuilder.error error} and {@link AsyncIterableBuilder.done done} methods.\n *\n * @returns A {@link PolyAsyncIterable} that yields elements as determined by the calls to `this`' methods\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPolyAsyncIterable(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toPolyAsyncIterable"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!AsyncIterableBuilder#value:member(1)",
              "docComment": "/**\n * Gives the underlying iterable a new value to be yielded.\n *\n * @remarks\n *\n * Objects given for iteration will be buffered until they are requested, and are guaranteed to be yielded before errors and before finishing the iteration.\n *\n * If this method is called after {@link AsyncIterableBuilder.error error} or {@link AsyncIterableBuilder.done done}, the given object is ignored.\n *\n * @param obj - The object to be yielded by the underlying iterable\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value(obj: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "value"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!ChunkingPredicate:type",
          "docComment": "/**\n * A function that receives an element (`elem`) of the iteration and the first and last element of a chunk, and returns a boolean value representing whether `elem` should be added to the current chunk (if `true`) or be the start of a new chunk (if `false`)\n *\n * @param elem - An element of the iteration\n *\n * @param lastElem - The last element of the current chunk\n *\n * @param firstElem - The first element of the current chunk\n *\n * @typeParam T - The type of the iteration elements\n *\n * @returns Whether `elem` should be added to the current chunk (`true`) or be the start of a new chunk (`false`)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChunkingPredicate<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, lastElem: T, firstElem: T) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChunkingPredicate",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!Comparator:type",
          "docComment": "/**\n * A function that receives two objects `elemA` and `elemB` and returns a number value that is negative if `elemA` should be sorted before `elemB`, positive if `elemA` should be sorted after `elemB`, or `0` if they should be sorted at the same position.\n *\n * @param elemA - the first element\n *\n * @param elemB - the second element\n *\n * @typeParam T - The type of the iteration elements\n *\n * @returns A number representing the sorting of `elemA` and `elemB` with respect to each other, as defined above\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Comparator<T> = "
            },
            {
              "kind": "Content",
              "text": "(elemA: T, elemB: T) => number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Comparator",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!IndexedMapping:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and returns a different object\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @typeParam U - The return type of the function\n *\n * @returns Some other value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedMapping<T, U> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => U"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedMapping",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!IndexedPredicate:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and returns a `boolean` value.\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @returns A `boolean` value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedPredicate<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedPredicate",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!IndexedReducer:type",
          "docComment": "/**\n * A function that receives an accumulated result, an element of an iteration, and returns a new accumulated result for the next call or as a final return value.\n *\n * @param acc - The previously accumulated value\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the iteration elements\n *\n * @typeParam U - The type of the accumulated result\n *\n * @returns The new accumulated result\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedReducer<T, U> = "
            },
            {
              "kind": "Content",
              "text": "(acc: U, item: T, index: number) => U"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedReducer",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!IndexedRunnable:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and doesn't return anything\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedRunnable<T> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedRunnable",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "polyethylene!IndexedTypePredicate:type",
          "docComment": "/**\n * A function that receives an object (`elem`) and its `index` in the iteration and returns a `boolean` value indicating if `elem` is of the generic type `U`\n *\n * @param elem - An element of the iteration\n *\n * @param index - The index of `elem` in the iteration\n *\n * @typeParam T - The type of the `elem` argument\n *\n * @typeParam U - The type asserted by this function\n *\n * @returns A `boolean` value indicating if `elem` is of type `U`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedTypePredicate<T, U extends "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "(elem: T, index: number) => "
            },
            {
              "kind": "Reference",
              "text": "elem",
              "canonicalReference": "polyethylene!~elem"
            },
            {
              "kind": "Content",
              "text": " is U"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedTypePredicate",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "U",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "polyethylene!Poly:namespace",
          "docComment": "/**\n * Main namespace for the creation of {@link PolySyncIterable} and {@link PolyAsyncIterable} objects.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Poly "
            }
          ],
          "releaseTag": "Public",
          "name": "Poly",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.asyncFrom:function(1)",
              "docComment": "/**\n * Create a new {@link PolyAsyncIterable} object from an iterable, async iterable, or a function that returns iterables (such as a generator function or an async generator function).\n *\n * If the passed argument is a function, it will be called with no arguments and its return value will be used to create the resulting {@link PolyAsyncIterable}.\n *\n * @param iterableOrFactory - an async iterable or async iterable factory used to create the resulting async iterable\n *\n * @typeParam T - The type of the resulting async iterable\n *\n * @returns A {@link PolyAsyncIterable} that iterates over the same elements as the passed iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asyncFrom<T>(iterableOrFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "IterableFactory",
                  "canonicalReference": "polyethylene!Poly.IterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableFactory",
                  "canonicalReference": "polyethylene!Poly.AsyncIterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iterableOrFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "asyncFrom"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "polyethylene!Poly.AsyncIterableFactory:type",
              "docComment": "/**\n * A function with no arguments that returns an `AsyncIterable`\n *\n * @typeParam T - The generic type of the returned `Iterable`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type AsyncIterableFactory<T> = "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "AsyncIterableFactory",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.asyncIterate:function(1)",
              "docComment": "/**\n * Returns a {@link PolyAsyncIterable} that will yield the values returned from calling `func` with the value last returned, or `undefined` when called for the first time.\n *\n * @remarks\n *\n * `func` will be called initially with `undefined`. After that, each element returned by calling it will be yielded as part of the resulting iterable and then passed to next call to `func`.\n *\n * Note that there is no way of yielding a different value to that passed to the next function call, and that the resulting iterable will not end. If this is undesired, either use some of the operators on the resulting iterable (such as {@link PolyAsyncIterable.map | map} or {@link PolyAsyncIterable.take | take} / {@link PolyAsyncIterable.take | takeWhile}) or use a different approach to create the iterable.\n *\n * @param func - The function that will be called to generate new elements of the iteration\n *\n * @typeParam T - The type of the interable and return type of `func`\n *\n * @returns an infinite iterable that yields the return values from calling `func` repeatedly\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asyncIterate<T>(func: "
                },
                {
                  "kind": "Content",
                  "text": "(lastValue: T | undefined) => T | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "asyncIterate"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.asyncIterate:function(2)",
              "docComment": "/**\n * Returns a {@link PolyAsyncIterable} that will yield the values returned from calling `func` with the value last returned, or `initValue` when called for the first time.\n *\n * @remarks\n *\n * `func` will be called initially with `initValue`. After that, each element returned by calling it will be yielded as part of the resulting iterable and then passed to next call to `func`. Note that `initValue` will not be part of the iteration.\n *\n * Note that there is no way of yielding a different value to that passed to the next function call, and that the resulting iterable will not end. If this is undesired, either use some of the operators on the resulting iterable (such as {@link PolyAsyncIterable.map | map} or {@link PolyAsyncIterable.take | take} / {@link PolyAsyncIterable.take | takeWhile}) or use a different approach to create the iterable.\n *\n * @param func - The function that will be called to generate new elements of the iteration\n *\n * @typeParam T - The type of the interable and return type of `func`\n *\n * @returns an infinite iterable that yields the return values from calling `func` repeatedly\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function asyncIterate<T>(func: "
                },
                {
                  "kind": "Content",
                  "text": "(lastValue: T) => T | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", initValue: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "asyncIterate"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.builder:function(1)",
              "docComment": "/**\n * Return a new {@link AsyncIterableBuilder}, an iterable object that can be constructed by calling its methods.\n *\n * @remarks\n *\n * This method for creating iterables should only be used as last resort if other functions are not enough. In particular, before using this method, see if {@link Poly.buildWith} works for you.\n *\n * @typeParam T - The type of the resulting builder\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function builder<T>(): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableBuilder",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "builder"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.buildWith:function(1)",
              "docComment": "/**\n * Create a new {@link PolyAsyncIterable} by passing the `func` function an {@link AsyncIterableBuilder} object.\n *\n * @remarks\n *\n * This method for creating iterables should only be used as a last resort if other functions are not enough.\n *\n * @param func - A function that will receive an object containing the methods `value`, `error` and `done`.\n *\n * @typeParam T - The type of the resulting async iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function buildWith<T>(func: "
                },
                {
                  "kind": "Content",
                  "text": "(builder: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableBuilder",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "buildWith"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.empty:function(1)",
              "docComment": "/**\n * Return a {@link PolySyncIterable} that yields no elements upon iteration.\n *\n * @typeParam T - Type of the resulting iterable\n *\n * @returns An iterable that yields no elements\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function empty<T = "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ">(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "empty"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.entries:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields the same elements as `Object.entries` would.\n *\n * @typeParam T - Type of the resulting iterable\n *\n * @returns An iterable that yields the entries of the passed object\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function entries<K extends "
                },
                {
                  "kind": "Content",
                  "text": "string | number | symbol"
                },
                {
                  "kind": "Content",
                  "text": ", V>(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<[K, V]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "entries"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.from:function(1)",
              "docComment": "/**\n * Create a new {@link PolyAsyncIterable} object from an iterable, async iterable, or a function that returns iterables (such as a generator function or an async generator function).\n *\n * If the passed argument is a function, it will be called with no arguments and its return value will be used to create the resulting {@link PolyAsyncIterable}.\n *\n * @param iterableOrFactory - an async iterable or async iterable factory used to create the resulting async iterable\n *\n * @typeParam T - The type of the resulting async iterable\n *\n * @returns A {@link PolyAsyncIterable} that iterates over the same elements as the passed iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function from<T>(iterableOrFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableFactory",
                  "canonicalReference": "polyethylene!Poly.AsyncIterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iterableOrFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "from"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.from:function(2)",
              "docComment": "/**\n * Create a new {@link PolySyncIterable} object from an iterable or a function that returns iterables (such as a generator function).\n *\n * If the passed argument is a function, it will be called with no arguments and its return value will be used to create the resulting {@link PolySyncIterable}.\n *\n * @param iterableOrFactory - an iterable or iterable factory used to create the resulting iterable\n *\n * @typeParam T - The type of the resulting iterable\n *\n * @returns A {@link PolySyncIterable} that iterates over the same elements as the passed iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function from<T>(iterableOrFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "IterableFactory",
                  "canonicalReference": "polyethylene!Poly.IterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "iterableOrFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "from"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.from:function(3)",
              "docComment": "/**\n * Create a new {@link PolySyncIterable} or {@link PolyAsyncIterable} object from a sync or async iterable or a function that returns sync or async iterables (such as a sync or async generator function).\n *\n * If the passed argument is a function, it will be called with no arguments and its return value will be used to create the resulting {@link PolySyncIterable} or {@link PolyAsyncIterable}.\n *\n * Whether the resulting iterable is sync or async depends on the input being sync or async.\n *\n * @param iterableOrFactory - a sync or async iterable or iterable factory used to create the resulting iterable\n *\n * @typeParam T - The type of the resulting iterable\n *\n * @returns A {@link PolySyncIterable} or {@link PolyAsyncIterable} that iterates over the same elements as the passed iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function from<T>(iterableOrFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "IterableFactory",
                  "canonicalReference": "polyethylene!Poly.IterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterableFactory",
                  "canonicalReference": "polyethylene!Poly.AsyncIterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "iterableOrFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "from"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "polyethylene!Poly.IterableFactory:type",
              "docComment": "/**\n * A function with no arguments that returns an `Iterable`\n *\n * @typeParam T - The generic type of the returned `Iterable`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type IterableFactory<T> = "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "IterableFactory",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.keys:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields the same elements as `Object.keys` would.\n *\n * @typeParam T - Type of the resulting iterable\n *\n * @returns An iterable that yields the keys of the passed object\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function keys<K extends "
                },
                {
                  "kind": "Content",
                  "text": "string | number | symbol"
                },
                {
                  "kind": "Content",
                  "text": ">(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<K>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "keys"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.range:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields numbers from 0 up to, but not including, `to`, with a step of 1.\n *\n * @param to - Exclusive upper bound of the iteration\n *\n * @returns - An iterable over the numbers from 0 to `to` with a step of 1\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function range(to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "range"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.range:function(2)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields numbers from `from` up to, but not including, `to`, with a step of 1.\n *\n * @param from - Inclusive lower bound of the iteration\n *\n * @param to - Exclusive upper bound of the iteration\n *\n * @returns - An iterable over the numbers from `from` to `to` with a step of 1\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function range(from: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "range"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.range:function(3)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields numbers from `from` up to, but not including, `to`, with a step of `step`.\n *\n * @param from - Inclusive lower bound of the iteration\n *\n * @param to - Exclusive upper bound of the iteration\n *\n * @param step - Distance between the iterated numbers\n *\n * @returns - An iterable over the numbers from `from` to `to` with a step of `step`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function range(from: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", step?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "step",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "range"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.repeat:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields the passed argument forever, without ending.\n *\n * @param value - The reapeated element\n *\n * @typeParam T - The type of the interable\n *\n * @returns an infinite iterable over the same element\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function repeat<T>(value: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "repeat"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.syncFrom:function(1)",
              "docComment": "/**\n * Create a new {@link PolySyncIterable} object from an iterable or a function that returns iterables (such as a generator function).\n *\n * If the passed argument is a function, it will be called with no arguments and its return value will be used to create the resulting {@link PolySyncIterable}.\n *\n * @param iterableOrFactory - an iterable or iterable factory used to create the resulting iterable\n *\n * @typeParam T - The type of the resulting iterable\n *\n * @returns A {@link PolySyncIterable} that iterates over the same elements as the passed iterable\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function syncFrom<T>(iterableOrFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "IterableFactory",
                  "canonicalReference": "polyethylene!Poly.IterableFactory:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iterableOrFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "syncFrom"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.syncIterate:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that will yield the values returned from calling `func` with the value last returned, or `undefined` when called for the first time.\n *\n * @remarks\n *\n * `func` will be called initially with `undefined`. After that, each element returned by calling it will be yielded as part of the resulting iterable and then passed to next call to `func`.\n *\n * Note that there is no way of yielding a different value to that passed to the next function call, and that the resulting iterable will not end. If this is undesired, either use some of the operators on the resulting iterable (such as {@link PolySyncIterable.map | map} or {@link PolySyncIterable.take | take} / {@link PolySyncIterable.take | takeWhile}) or use a different approach to create the iterable.\n *\n * @param func - The function that will be called to generate new elements of the iteration\n *\n * @typeParam T - The type of the interable and return type of `func`\n *\n * @returns an infinite iterable that yields the return values from calling `func` repeatedly\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function syncIterate<T>(func: "
                },
                {
                  "kind": "Content",
                  "text": "(lastValue: T | undefined) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "syncIterate"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.syncIterate:function(2)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that will yield the values returned from calling `func` with the value last returned, or `initValue` when called for the first time.\n *\n * @remarks\n *\n * `func` will be called initially with `initValue`. After that, each element returned by calling it will be yielded as part of the resulting iterable and then passed to next call to `func`. Note that `initValue` will not be part of the iteration.\n *\n * Note that there is no way of yielding a different value to that passed to the next function call, and that the resulting iterable will not end. If this is undesired, either use some of the operators on the resulting iterable (such as {@link PolySyncIterable.map | map} or {@link PolySyncIterable.take | take} / {@link PolySyncIterable.take | takeWhile}) or use a different approach to create the iterable.\n *\n * @param func - The function that will be called to generate new elements of the iteration\n *\n * @typeParam T - The type of the interable and return type of `func`\n *\n * @returns an infinite iterable that yields the return values from calling `func` repeatedly\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function syncIterate<T>(func: "
                },
                {
                  "kind": "Content",
                  "text": "(lastValue: T) => T"
                },
                {
                  "kind": "Content",
                  "text": ", initValue: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "initValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "syncIterate"
            },
            {
              "kind": "Function",
              "canonicalReference": "polyethylene!Poly.values:function(1)",
              "docComment": "/**\n * Returns a {@link PolySyncIterable} that yields the same elements as `Object.values` would.\n *\n * @typeParam T - Type of the resulting iterable\n *\n * @returns An iterable that yields the values of the passed object\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function values<V>(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string | number | symbol, V>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<V>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "values"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "polyethylene!PolyAsyncIterable:class",
          "docComment": "/**\n * An `AsyncIterable<T>` with a suite of methods for transforming the iteration into other iterations or to get a single result from it.\n *\n * This class works as an async version of {@link PolySyncIterable}, but all methods accept async function where possible and will always return either `PolyAsyncIterables` or a `Promise` to a value.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `PolyAsyncIterable` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class PolyAsyncIterable<T> implements "
            },
            {
              "kind": "Reference",
              "text": "AsyncIterable",
              "canonicalReference": "!AsyncIterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PolyAsyncIterable",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#[Symbol.asyncIterator]:member(1)",
              "docComment": "/**\n * Allows this class to work as a regular `AsyncIterable<T>`\n *\n * @returns an async iterable that will yield the same elements as the iterable used to create this instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.asyncIterator",
                  "canonicalReference": "!SymbolConstructor#asyncIterator"
                },
                {
                  "kind": "Content",
                  "text": "](): "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterator",
                  "canonicalReference": "!AsyncIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, any, undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "[Symbol.asyncIterator]"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#append:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `this`, then over `other`.\n *\n * @remarks\n *\n * The resulting iteration is of the combined generic type of `this` and `other`, allowing this method to merge the types of two distinct iterables.\n *\n * @param other - Iterable to be appended\n *\n * @typeParam U - Type of the elements to be appended\n *\n * @returns a new {@link PolyAsyncIterable} that yields the elements of `this` and then the elements of `other`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "append"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#async:member(1)",
              "docComment": "/**\n * Return `this`.\n *\n * @remarks\n *\n * This method is present in this class for compatibility with {@link PolySyncIterable.async}, but it's never necessary to call it for anything.\n *\n * @returns A {@link PolyAsyncIterable} that yields the same elements as `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "async(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "async"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#chunk:member(1)",
              "docComment": "/**\n * Return an iteration of arrays of size `num` (except possibly the last) containing groupings of elements of `this` iteration.\n *\n * @remarks\n *\n * All chunks except possibly the last one will have exactly `num` elements. The last chunk will have less elements if the number of elements in the iteration is not divisible by `num`. No chunk will ever be returned empty or have more than `num` elements.\n *\n * @param num - Size of the chunks\n *\n * @returns A new {@link PolyAsyncIterable} that yields arrays of size `num` (except possibly the last) containing groupings of elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chunk(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "chunk"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#chunkWhile:member(1)",
              "docComment": "/**\n * Return an iteration of arrays with elements of this separated based on the result of calling `func(elements)`.\n *\n * @remarks\n *\n * The chunking process works by keeping an open _current chunk_ and calling `func` to decide whether the next element of the iteration will be part of the _current chunk_ or if it will be part of a new chunk.\n *\n * To do this, `func` will be called for every element of the iteration except the first, which will automatically become part of the first chunk. If `func` returns `true`, the element will be part of the current chunk, and if it returns `false`, the _current chunk_ is closed and the element becomes the first element if the new _current chunk_. The arguments passed to `func` will be, in order: - `elem` - The element being currently processed - `lastElem` - The last element that was added to the current chunk - `firstElem` - The first element of the current chunk (might be the same as `lastElem`)\n *\n * All elements will be part of a chunk, and no chunk will ever be empty.\n *\n * @param func - A function that decides if an element is part of the current chunk or initiates a new one\n *\n * @returns A new {@link PolyAsyncIterable} that yields arrays with the elements of `this` as separated by `func`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chunkWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncChunkingPredicate",
                  "canonicalReference": "polyethylene!AsyncChunkingPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "chunkWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#complete:member(1)",
              "docComment": "/**\n * Perform this iteration doing nothing.\n *\n * @returns a promise that will resolve when the iteration is done\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complete(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "complete"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#concat:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `this`, then over `other`.\n *\n * @remarks\n *\n * This method is an alias for {@link PolyAsyncIterable.append}.\n *\n * @param other - Iterable to be appended\n *\n * @typeParam U - Type of the elements to be appended\n *\n * @returns a new {@link PolySyncIterable} that yields the elements of `this` and then the elements of `other`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "concat<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "concat"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#drop:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the first `num` elements. If there were less than `num` elements in the iteration, no elements are yielded.\n *\n * @param num - The number of elements to skip\n *\n * @returns a new {@link PolyAsyncIterable} that yields the same the elements of `this`, except for the first `num` elements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drop(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "drop"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#dropLast:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the last `num` elements. If there were less than `num` elements in the iteration, no elements are yielded.\n *\n * @remarks\n *\n * The returned iteration keeps a buffer of `num` elements internally in order to skip those if the iteration ends, and so elements effectively get delayed by `num` elements.\n *\n * @param num - The number of elements to skip\n *\n * @returns a new {@link PolyAsyncIterable} that yields the same the elements of `this`, except for the last `num` elements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropLast(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "dropLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#dropWhile:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the first few elements for which `func(element)` returns `true`.\n *\n * @param func - The function to call on the elements\n *\n * @returns a new {@link PolyAsyncIterable} that yields the same the elements of `this`, excepts the first few for which`func(element)` returns `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "dropWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#every:member(1)",
              "docComment": "/**\n * Returns `true` if calling `func(element)` returns `true` for every element, and `false` otherwise\n *\n * @remarks\n *\n * If a call to `func(element)` returns `false`, no more elements are iterated.\n *\n * @param func - A function to be called on the elements of the iteration\n *\n * @returns A promise to whether calling `func` returned `true` for all elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "every(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "every"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#filter:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` for which `func(element)` returns `true`.\n *\n * @remarks\n *\n * Because the `func` argument is a type predicate, the result iteration will have the type asserted by `func`.\n *\n * @param func - The function to be called on all elements\n *\n * @typeParam U - The type asserted by `func`, if any\n *\n * @returns A new {@link PolyAsyncIterable} with only elements for which `func(element)` returned true and correctly narrowed to the type asserted by `func`\n *\n * {@label FILTER_TYPEPRED}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "filter"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#filter:member(2)",
              "docComment": "/**\n * Return an iteration of the elements of `this` for which `func(element)` returns `true`.\n *\n * @param func - The function to be called on all elements\n *\n * @returns A new {@link PolyAsyncIterable} with only elements for which `func(element)` returned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "filter"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#filterNotNullish:member(1)",
              "docComment": "/**\n * Return an iteration of all the elements as `this` that aren't `null` or `undefined`.\n *\n * @remarks\n *\n * This function is a shortcut to calling {@link PolyAsyncIterable.filter.(:FILTER_TYPEPRED)} with a type predicate function that correctly filters out `null` and `undefined` values from the iteration. Note that other falsy values will remain in the iteration, and that the return value is correctly typed to exclude `null` and `undefined`.\n *\n * @returns A new {@link PolyAsyncIterable} that yields the same elements as `this` except for `null` or `undefined` values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterNotNullish(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "filterNotNullish"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#find:member(1)",
              "docComment": "/**\n * Returns the first element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on elements of this iteration until it returns `true`, and then not called again.\n *\n * The return type of this function is narrowed to the type asserted by `func`.\n *\n * @param func - A type predicate called for elements of `this`\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns A promise to the first element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "find<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "find"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#find:member(2)",
              "docComment": "/**\n * Returns the first element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on elements of this iteration until it returns `true`, and then not called again.\n *\n * @param func - A boolean returning function called for elements of `this`\n *\n * @returns A promise to the first element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "find(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "find"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#findLast:member(1)",
              "docComment": "/**\n * Returns the last element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on *all* of this iteration, and the result will not be returned until the iteration ends.\n *\n * The return type of this function is narrowed to the type asserted by `func`.\n *\n * @param func - A type predicate called for elements of `this`\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns A promise to the last element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findLast<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "findLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#findLast:member(2)",
              "docComment": "/**\n * Returns the last element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on *all* of this iteration, and the result will not be returned until the iteration ends.\n *\n * @param func - A boolean returning function called for elements of `this`\n *\n * @returns A promise to the last element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findLast(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "findLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#flat:member(1)",
              "docComment": "/**\n * Return an iteration of the yielded elements of the sub-iterables.\n *\n * @remarks\n *\n * This method is an alias of {@link PolyAsyncIterable.flatten}.\n *\n * @typeParam U - The type of the sub-iterable elements\n *\n * @returns A new {@link PolyAsyncIterable} that will yield the elements of all sub-iterables\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flat<U>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flat"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#flatMap:member(1)",
              "docComment": "/**\n * Return an iteration of elements of the sub-iterables that result from calling `func(element)` for every element in `this`.\n *\n * @remarks\n *\n * This method is equivalent to calling {@link PolyAsyncIterable.map map(func)} and then {@link PolyAsyncIterable.flatten flatten()}\n *\n * @param func - A function that takes an element of `this` and returns an iterable\n *\n * @typeParam U - The type of the sub-iterables returned by `func`\n *\n * @returns A new {@link PolyAsyncIterable} that yields the elements of the subiterables that results from calling `func(element)` for every element of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flatMap<U>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedMapping",
                  "canonicalReference": "polyethylene!AsyncIndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#flatten:member(1)",
              "docComment": "/**\n * Return an iteration of the yielded elements of the sub-iterables.\n *\n * @typeParam U - The type of the sub-iterable elements\n *\n * @returns A new {@link PolyAsyncIterable} that will yield the elements of all sub-iterables\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flatten<U>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatten"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#forEach:member(1)",
              "docComment": "/**\n * Call a function for each element of `this` iteration.\n *\n * @param func - A function to be called for every element of the iteration\n *\n * @returns A promise that will resolve when all calls have resolved\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEach(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedRunnable",
                  "canonicalReference": "polyethylene!AsyncIndexedRunnable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "forEach"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#groupBy:member(1)",
              "docComment": "/**\n * Return an iteration of group pairs, where the first element is a _group key_ and the second is an iterable of all the elements for which `func(element)` returned the key.\n *\n * @remarks\n *\n * This method is intended to be combined with {@link PolyAsyncIterable.toObject toObject} or {@link PolyAsyncIterable.toMap toMap}, thus behaving like {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/groupBy Array.groupBy} and {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/groupByToMap Array.groupByToMap} respectively, but without losing the ablity to further process the iteration, such as by mapping, filtering, etc.\n *\n * @param func - A function that returns the grouping key of each element\n *\n * @typeParam K - Type of the keys used to group elements\n *\n * @returns A new {@link PolyAsyncIterable} of group pairs with the key and the group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupBy<K>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedMapping",
                  "canonicalReference": "polyethylene!AsyncIndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<[K, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "groupBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#includes:member(1)",
              "docComment": "/**\n * Returns whether an element is present in this iteration.\n *\n * @remarks\n *\n * If the element is found in the iteration, no more elements are iterated.\n *\n * @param obj - The element to search in the iteration\n *\n * @returns A promise to whether `obj` is present in this iteration or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includes(obj: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "includes"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#join:member(1)",
              "docComment": "/**\n * Return the result of joining the elements of `this` with the given `glue`, or `','` if no glue is given.\n *\n * @remarks\n *\n * `null` or `undefined` elements are treated as empty strings.\n *\n * @param glue - The string to use for joining the elements\n *\n * @returns A promise to a string concatenating all elements of `this` using the given `glue`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "join(glue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "glue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "join"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#map:member(1)",
              "docComment": "/**\n * Return an iteration of the result of calling `func(element)` for every element in `this`.\n *\n * @param func - A function that takes an element of `this` and returns something else\n *\n * @typeParam U - The return type of `func` and the generic type of the resulting iterable\n *\n * @returns A new {@link PolyAsyncIterable} that yields the results of calling `func(element)` for every element of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "map<U>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedMapping",
                  "canonicalReference": "polyethylene!AsyncIndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "map"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#prefetch:member(1)",
              "docComment": "/**\n * Return the same iteration, but with its elements requested with anticipation to allow for asynchronous operations to begin and reduce wait times.\n *\n * @remarks\n *\n * When yielding an element of this iterable, the next one will be also requested internally, so that any asynchronous operations are started before their results are needed.\n *\n * Note that after calling this mehtod, more elements than strictly needed might be requested from the previous iterable, triggering any potential side effects.\n *\n * @returns a new {@link PolyAsyncIterable} that prefetched the iterated elementsd\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prefetch(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "prefetch"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#prepend:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `other`, then over `this`.\n *\n * @remarks\n *\n * The resulting iteration is of the combined generic type of `this` and `other`, allowing this method to merge the types of two distinct iterables.\n *\n * @param other - Iterable to be prepended\n *\n * @typeParam U - Type of the elements to be prepended\n *\n * @returns a new {@link PolyAsyncIterable} that yields the elements of `other` and then the elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepend<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "prepend"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#reduce:member(1)",
              "docComment": "/**\n * Returns the result of calling the passed `reducer` for all elements of the iteration and the result of the previous call to `reducer`, starting by passing `init` or, if not present, the first element of the iteration.\n *\n * @remarks\n *\n * If the `init` argument is not present, at least one element must be present in the iteration, else an error will be thrown\n *\n * `reducer` will be called with the accumulated result, the next element of the iteration, and the index of the iteration. The resolved return value will be the value passed to the next call as the first argument, or the value returned if no more elements remain.\n *\n * @param reducer - A function to call for all elements with the result of a previous call\n *\n * @param init - First element to be passed to the `reducer` function\n *\n * @returns A promise the result to continually call `reducer` with all elements and the previous result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reduce(reducer: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedReducer",
                  "canonicalReference": "polyethylene!AsyncIndexedReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, T>"
                },
                {
                  "kind": "Content",
                  "text": ", init?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reducer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "init",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "reduce"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#reduce:member(2)",
              "docComment": "/**\n * Returns the result of calling the passed `reducer` for all elements of the iteration and the result of the previous call to `reducer`, starting by passing `init`.\n *\n * @remarks\n *\n * `reducer` will be called with the accumulated result, the next element of the iteration, and the index of the iteration. The resolved return value will be the value passed to the next call as the first argument, or the value returned if no more elements remain.\n *\n * @param reducer - A function to call for all elements with the result of a previous call\n *\n * @param init - First element to be passed to the `reducer` function\n *\n * @returns A promise the result to continually call `reducer` with all elements and the previous result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reduce<U>(reducer: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedReducer",
                  "canonicalReference": "polyethylene!AsyncIndexedReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": ", init: "
                },
                {
                  "kind": "Content",
                  "text": "U"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "reducer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "init",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "reduce"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#reverse:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` in reverse order.\n *\n * @remarks\n *\n * This method will buffer _all_ elements of the iteration, and yield them all at once at the end\n *\n * @returns A new {@link PolyAsyncIterable} that yields the elements of `this` in reverse order\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reverse(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reverse"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#slice:member(1)",
              "docComment": "/**\n * Return a new iteration that starts from the `start`th element (included) and ends at the `end`th element (excluded) of `this`.\n *\n * @remarks\n *\n * Both `start` and `end` allow for negative values, in which case they refer to the nth-to-last element, with n being the absolute value of the argument. `end` might also be `undefined`, in which case the iteration is not shortened on the end side, yielding up to the end, including the last element. This mimics the behaviour of {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice Array.slice}.\n *\n * This function will likely need a buffer, effectively delaying the yielding of elements for a while.\n *\n * @param start - The index of the first element returned\n *\n * @param end - The index of the first element *not* returned, inclusive\n *\n * @returns a new {@link PolyAsyncIterable} that yields the elements going that starts from the `start`th element (included) and ends at the `end`th element (excluded) of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slice(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "slice"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#some:member(1)",
              "docComment": "/**\n * Returns `true` if calling `func(element)` returns `true` for at least one element, and `false` otherwise\n *\n * @remarks\n *\n * If a call to `func(element)` returns `true`, no more elements are iterated.\n *\n * @param func - A function to be called on the elements of the iteration\n *\n * @returns A promise to whether calling `func` returned `true` on at least one element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "some(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "some"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#sort:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` sorted according to `func`\n *\n * @remarks\n *\n * The sort function `func` is used to call {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort} on an array of all the elements. However, the default comparator function will sort elements according to the `<` and `>` operators defined on their own type, of always sorting lexicagraphically like {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort} does.\n *\n * This method will buffer _all_ elements of the iteration, and yield them all at once at the end\n *\n * @param func - A comparator function\n *\n * @returns A new {@link PolyAsyncIterable} that yields the elements of `this` sorted according to `func`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sort(func?: "
                },
                {
                  "kind": "Reference",
                  "text": "Comparator",
                  "canonicalReference": "polyethylene!Comparator:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "name": "sort"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#take:member(1)",
              "docComment": "/**\n * Return a new iteration that iterates only over the first `num` elements. If there were less than than `num` elements in the iteration, all elements are yielded with no additions.\n *\n * @param num - The number of elements to yield\n *\n * @returns a new {@link PolyAsyncIterable} that yields the first `num` elements elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "take(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "take"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#takeLast:member(1)",
              "docComment": "/**\n * Return a new iteration that iterates only over the last `num` elements. If there were less than than `num` elements in the iteration, all elements are yielded with no additions.\n *\n * @remarks\n *\n * The returned iteration keeps a buffer of `num` elements internally in order to know which elements to keep. and so elements effectively get delayed until the iteration ends.\n *\n * @param num - The number of elements to yield\n *\n * @returns a new {@link PolyAsyncIterable} that yields the last `num` elements elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "takeLast(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "takeLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#takeWhile:member(1)",
              "docComment": "/**\n * Return a new iteration that yields the first few elements for which `func(element)` returns `true`.\n *\n * @param func - The function to call on the elements\n *\n * @returns a new {@link PolyAsyncIterable} that yields the same the elements of `this` as long as `func(element)` returns `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "takeWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "takeWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#tap:member(1)",
              "docComment": "/**\n * Return an iteration of the same elements as `this` after calling `func(element)` for all elements.\n *\n * @param func - A function called for all elements\n *\n * @typeParam U - The return type of `func`\n *\n * @returns A new {@link PolyAsyncIterable} that yields the same elements as `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedRunnable",
                  "canonicalReference": "polyethylene!AsyncIndexedRunnable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "tap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#toArray:member(1)",
              "docComment": "/**\n * Return an array of all elements of this iteration in the same order that were yielded.\n *\n * @returns A promise to an array that contains the same elements as this iteration, in the same order\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#toMap:member(1)",
              "docComment": "/**\n * Return a `Map` made from the entries of `this`. This method is roughly equivalent to calling `new Map(iter.toArray())`.\n *\n * @remarks\n *\n * This method is only available for iterations of pairs where the first component is a valid object key type.\n *\n * @returns A promise to a `Map` composed of the entries yielded by this iterable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toMap<K, V>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<readonly [K, V]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#toObject:member(1)",
              "docComment": "/**\n * Return an object made from the entries of `this`. This method is roughly equivalent to calling `Object.fromEntires(iter.toArray())`.\n *\n * @remarks\n *\n * This method is only available for iterations of pairs where the first component is a valid object key type.\n *\n * @returns A promise to an object composed of the entries yielded by this iterable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObject<K extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyKey",
                  "canonicalReference": "!PropertyKey:type"
                },
                {
                  "kind": "Content",
                  "text": ", V>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<readonly [K, V]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#toPartitionArrays:member(1)",
              "docComment": "/**\n * Splits this iteration into two arrays, one with elements for which `func(element)` returns `true` (the _truthy elements_) and one for which it returns `false` (the _falsy elements_).\n *\n * @remarks\n *\n * The array of _truthy elements_ has its element type narrowed to the type asserted by `func`.\n *\n * @param func - A function that will be called for all elements to split them into the result arrays\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns A promise to a tuple with the array of values for which `func` returned `true` as the first element, and the array of values for which `func` returned `false` as the second element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPartitionArrays<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>>]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toPartitionArrays"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#toPartitionArrays:member(2)",
              "docComment": "/**\n * Splits this iteration into two arrays, one with elements for which `func(element)` returns `true` (the _truthy elements_) and one for which it returns `false` (the _falsy elements_).\n *\n * @param func - A function that will be called for all elements to split them into the result arrays\n *\n * @returns A promise to a tuple with the array of values for which `func` returned `true` as the first element, and the array of values for which `func` returned `false` as the second element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPartitionArrays(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedPredicate",
                  "canonicalReference": "polyethylene!AsyncIndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "toPartitionArrays"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolyAsyncIterable#unique:member(1)",
              "docComment": "/**\n * Return an iteration of unique elements, where two elements are considered equal if the result of `func(element)` is the same for both elements.\n *\n * @remarks\n *\n * Note that the first element seen with a specific key is always the one yielded, and every other element afterwards is ignored.\n *\n * If no key-mapping function is given, the elements theselves are used as keys. This is likely _not_ what you want in most situations unless elements are primitive types.\n *\n * @param func - A function that returns a _key_ used for uniqueness checks. If not passed, an identitity function is used.\n *\n * @returns A new {@link PolyAsyncIterable} only elements for which `func(element)` returns a value that hasn't been seen before\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unique(func?: "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIndexedMapping",
                  "canonicalReference": "polyethylene!AsyncIndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "name": "unique"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "polyethylene!PolySyncIterable:class",
          "docComment": "/**\n * A `SyncIterable<T>` with a suite of methods for transforming the iteration into other iterations or to get a single result from it.\n *\n * The methods of this class are intended to resemble those of `Array`, with added utilities where appropriate and made for any kind of iterable.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `PolySyncIterable` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class PolySyncIterable<T> implements "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PolySyncIterable",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#[Symbol.iterator]:member(1)",
              "docComment": "/**\n * Allows this class to work as a regular `Iterable<T>`\n *\n * @returns an iterable that will yield the same elements as the iterable used to create this instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.iterator",
                  "canonicalReference": "!SymbolConstructor#iterator"
                },
                {
                  "kind": "Content",
                  "text": "](): "
                },
                {
                  "kind": "Reference",
                  "text": "Generator",
                  "canonicalReference": "!Generator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, void, undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "[Symbol.iterator]"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#append:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `this`, then over `other`.\n *\n * @remarks\n *\n * The resulting iteration is of the combined generic type of `this` and `other`, allowing this method to merge the types of two distinct iterables.\n *\n * @param other - Iterable to be appended\n *\n * @typeParam U - Type of the elements to be appended\n *\n * @returns a new {@link PolySyncIterable} that yields the elements of `this` and then the elements of `other`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "append"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#async:member(1)",
              "docComment": "/**\n * Return an async version of this same iteration.\n *\n * @returns A {@link PolyAsyncIterable} that yields the same elements as `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "async(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolyAsyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "async"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#chunk:member(1)",
              "docComment": "/**\n * Return an iteration of arrays of size `num` (except possibly the last) containing groupings of elements of `this` iteration.\n *\n * @remarks\n *\n * All chunks except possibly the last one will have exactly `num` elements. The last chunk will have less elements if the number of elements in the iteration is not divisible by `num`. No chunk will ever be returned empty or have more than `num` elements.\n *\n * @param num - Size of the chunks\n *\n * @returns A new {@link PolySyncIterable} that yields arrays of size `num` (except possibly the last) containing groupings of elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chunk(num?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "chunk"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#chunkWhile:member(1)",
              "docComment": "/**\n * Return an iteration of arrays with elements of this separated based on the result of calling `func(elements)`.\n *\n * @remarks\n *\n * The chunking process works by keeping an open _current chunk_ and calling `func` to decide whether the next element of the iteration will be part of the _current chunk_ or if it will be part of a new chunk.\n *\n * To do this, `func` will be called for every element of the iteration except the first, which will automatically become part of the first chunk. If `func` returns `true`, the element will be part of the current chunk, and if it returns `false`, the _current chunk_ is closed and the element becomes the first element if the new _current chunk_. The arguments passed to `func` will be, in order: - `elem` - The element being currently processed - `lastElem` - The last element that was added to the current chunk - `firstElem` - The first element of the current chunk (might be the same as `lastElem`)\n *\n * All elements will be part of a chunk, and no chunk will ever be empty.\n *\n * @param func - A function that decides if an element is part of the current chunk or initiates a new one\n *\n * @returns A new {@link PolySyncIterable} that yields arrays with the elements of `this` as separated by `func`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "chunkWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "ChunkingPredicate",
                  "canonicalReference": "polyethylene!ChunkingPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "chunkWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#complete:member(1)",
              "docComment": "/**\n * Perform this iteration doing nothing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "complete(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "complete"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#concat:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `this`, then over `other`.\n *\n * @remarks\n *\n * This method is an alias for {@link PolySyncIterable.append}.\n *\n * @param other - Iterable to be appended\n *\n * @typeParam U - Type of the elements to be appended\n *\n * @returns a new {@link PolySyncIterable} that yields the elements of `this` and then the elements of `other`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "concat<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "concat"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#drop:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the first `num` elements. If there were less than `num` elements in the iteration, no elements are yielded.\n *\n * @param num - The number of elements to skip\n *\n * @returns a new {@link PolySyncIterable} that yields the same the elements of `this`, except for the first `num` elements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drop(num?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "drop"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#dropLast:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the last `num` elements. If there were less than `num` elements in the iteration, no elements are yielded.\n *\n * @remarks\n *\n * The returned iteration keeps a buffer of `num` elements internally in order to skip those if the iteration ends, and so elements effectively get delayed by `num` elements.\n *\n * @param num - The number of elements to skip\n *\n * @returns a new {@link PolySyncIterable} that yields the same the elements of `this`, except for the last `num` elements\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropLast(num?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "dropLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#dropWhile:member(1)",
              "docComment": "/**\n * Return a new iteration that skips the first few elements for which `func(element)` returns `true`.\n *\n * @param func - The function to call on the elements\n *\n * @returns a new {@link PolySyncIterable} that yields the same the elements of `this`, excepts the first few for which`func(element)` returns `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dropWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "dropWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#every:member(1)",
              "docComment": "/**\n * Returns `true` if calling `func(element)` returns `true` for every element, and `false` otherwise\n *\n * @remarks\n *\n * If a call to `func(element)` returns `false`, no more elements are iterated.\n *\n * @param func - A function to be called on the elements of the iteration\n *\n * @returns Whether calling `func` returned `true` for all elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "every(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "every"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#filter:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` for which `func(element)` returns `true`.\n *\n * @remarks\n *\n * Because the `func` argument is a type predicate, the result iteration will have the type asserted by `func`.\n *\n * @param func - The function to be called on all elements\n *\n * @typeParam U - The type asserted by `func`, if any\n *\n * @returns A new {@link PolySyncIterable} with only elements for which `func(element)` returned true and correctly narrowed to the type asserted by `func`\n *\n * {@label FILTER_TYPEPRED}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "filter"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#filter:member(2)",
              "docComment": "/**\n * Return an iteration of the elements of `this` for which `func(element)` returns `true`.\n *\n * @param func - The function to be called on all elements\n *\n * @returns A new {@link PolySyncIterable} with only elements for which `func(element)` returned\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "filter"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#filterNotNullish:member(1)",
              "docComment": "/**\n * Return an iteration of all the elements as `this` that aren't `null` or `undefined`.\n *\n * @remarks\n *\n * This function is a shortcut to calling {@link PolySyncIterable.filter.(:FILTER_TYPEPRED)} with a type predicate function that correctly filters out `null` and `undefined` values from the iteration. Note that other falsy values will remain in the iteration, and that the return value is correctly typed to exclude `null` and `undefined`.\n *\n * @returns A new {@link PolySyncIterable} that yields the same elements as `this` except for `null` or `undefined` values\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterNotNullish(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NonNullable",
                  "canonicalReference": "!NonNullable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "filterNotNullish"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#find:member(1)",
              "docComment": "/**\n * Returns the first element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on elements of this iteration until it returns `true`, and then not called again.\n *\n * The return type of this function is narrowed to the type asserted by `func`.\n *\n * @param func - A type predicate called for elements of `this`\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns The first element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "find<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "U | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "find"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#find:member(2)",
              "docComment": "/**\n * Returns the first element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on elements of this iteration until it returns `true`, and then not called again.\n *\n * @param func - A boolean returning function called for elements of `this`\n *\n * @returns The first element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "find(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "find"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#findLast:member(1)",
              "docComment": "/**\n * Returns the last element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on *all* of this iteration, and the result will not be returned until the iteration ends.\n *\n * The return type of this function is narrowed to the type asserted by `func`.\n *\n * @param func - A type predicate called for elements of `this`\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns The last element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findLast<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "U | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "findLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#findLast:member(2)",
              "docComment": "/**\n * Returns the last element for which `func(element)` returns `true`, or `undefined` if it never does.\n *\n * @remarks\n *\n * `func` will be called on *all* of this iteration, and the result will not be returned until the iteration ends.\n *\n * @param func - A boolean returning function called for elements of `this`\n *\n * @returns The last element of the iteration for which `func` returned `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findLast(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "findLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#flat:member(1)",
              "docComment": "/**\n * Return an iteration of the yielded elements of the sub-iterables.\n *\n * @remarks\n *\n * This method is an alias of {@link PolySyncIterable.flatten}.\n *\n * @typeParam U - The type of the sub-iterable elements\n *\n * @returns A new {@link PolySyncIterable} that will yield the elements of all sub-iterables\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flat<U>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flat"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#flatMap:member(1)",
              "docComment": "/**\n * Return an iteration of elements of the sub-iterables that result from calling `func(element)` for every element in `this`.\n *\n * @remarks\n *\n * This method is equivalent to calling {@link PolySyncIterable.map map(func)} and then {@link PolySyncIterable.flatten flatten()}\n *\n * @param func - A function that takes an element of `this` and returns an iterable\n *\n * @typeParam U - The type of the sub-iterables returned by `func`\n *\n * @returns A new {@link PolySyncIterable} that yields the elements of the subiterables that results from calling `func(element)` for every element of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flatMap<U>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedMapping",
                  "canonicalReference": "polyethylene!IndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#flatten:member(1)",
              "docComment": "/**\n * Return an iteration of the yielded elements of the sub-iterables.\n *\n * @typeParam U - The type of the sub-iterable elements\n *\n * @returns A new {@link PolySyncIterable} that will yield the elements of all sub-iterables\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flatten<U>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "flatten"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#forEach:member(1)",
              "docComment": "/**\n * Call a function for each element of `this` iteration.\n *\n * @param func - A function to be called for every element of the iteration\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEach(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedRunnable",
                  "canonicalReference": "polyethylene!IndexedRunnable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "forEach"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#groupBy:member(1)",
              "docComment": "/**\n * Return an iteration of group pairs, where the first element is a _group key_ and the second is an iterable of all the elements for which `func(element)` returned the key.\n *\n * @remarks\n *\n * This method is intended to be combined with {@link PolySyncIterable.toObject toObject} or {@link PolySyncIterable.toMap toMap}, thus behaving like {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/groupBy Array.groupBy} and {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/groupByToMap Array.groupByToMap} respectively, but without losing the ablity to further process the iteration, such as by mapping, filtering, etc.\n *\n * @param func - A function that returns the grouping key of each element\n *\n * @typeParam K - Type of the keys used to group elements\n *\n * @returns A new {@link PolySyncIterable} of group pairs with the key and the group\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupBy<K>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedMapping",
                  "canonicalReference": "polyethylene!IndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, K>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<[K, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "groupBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#includes:member(1)",
              "docComment": "/**\n * Returns whether an element is present in this iteration.\n *\n * @remarks\n *\n * If the element is found in the iteration, no more elements are iterated.\n *\n * @param obj - The element to search in the iteration\n *\n * @returns Whether `obj` is present in this iteration or not\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includes(obj: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "includes"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#join:member(1)",
              "docComment": "/**\n * Return the result of joining the elements of `this` with the given `glue`, or `','` if no glue is given.\n *\n * @remarks\n *\n * `null` or `undefined` elements are treated as empty strings.\n *\n * @param glue - The string to use for joining the elements\n *\n * @returns A string concatenating all elements of `this` using the given `glue`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "join(glue?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "glue",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "join"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#map:member(1)",
              "docComment": "/**\n * Return an iteration of the result of calling `func(element)` for every element in `this`.\n *\n * @param func - A function that takes an element of `this` and returns something else\n *\n * @typeParam U - The return type of `func` and the generic type of the resulting iterable\n *\n * @returns A new {@link PolySyncIterable} that yields the results of calling `func(element)` for every element of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "map<U>(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedMapping",
                  "canonicalReference": "polyethylene!IndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "map"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#prepend:member(1)",
              "docComment": "/**\n * Return a new iteration that will iterate over `other`, then over `this`.\n *\n * @remarks\n *\n * The resulting iteration is of the combined generic type of `this` and `other`, allowing this method to merge the types of two distinct iterables.\n *\n * @param other - Iterable to be prepended\n *\n * @typeParam U - Type of the elements to be prepended\n *\n * @returns a new {@link PolySyncIterable} that yields the elements of `other` and then the elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepend<U>(other: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T | U>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "prepend"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#reduce:member(1)",
              "docComment": "/**\n * Returns the result of calling the passed `reducer` for all elements of the iteration and the result of the previous call to `reducer`, starting by passing `init` or, if not present, the first element of the iteration.\n *\n * @remarks\n *\n * If the `init` argument is not present, at least one element must be present in the iteration, else an error will be thrown\n *\n * `reducer` will be called with the accumulated result, the next element of the iteration, and the index of the iteration. The resolved return value will be the value passed to the next call as the first argument, or the value returned if no more elements remain.\n *\n * @param reducer - A function to call for all elements with the result of a previous call\n *\n * @param init - First element to be passed to the `reducer` function\n *\n * @returns The result to continually call `reducer` with all elements and the previous result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reduce(reducer: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedReducer",
                  "canonicalReference": "polyethylene!IndexedReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, T>"
                },
                {
                  "kind": "Content",
                  "text": ", init?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reducer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "init",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": true
                }
              ],
              "name": "reduce"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#reduce:member(2)",
              "docComment": "/**\n * Returns the result of calling the passed `reducer` for all elements of the iteration and the result of the previous call to `reducer`, starting by passing `init`.\n *\n * @remarks\n *\n * `reducer` will be called with the accumulated result, the next element of the iteration, and the index of the iteration. The resolved return value will be the value passed to the next call as the first argument, or the value returned if no more elements remain.\n *\n * @param reducer - A function to call for all elements with the result of a previous call\n *\n * @param init - First element to be passed to the `reducer` function\n *\n * @returns The result to continually call `reducer` with all elements and the previous result\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reduce<U>(reducer: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedReducer",
                  "canonicalReference": "polyethylene!IndexedReducer:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": ", init: "
                },
                {
                  "kind": "Content",
                  "text": "U"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "U"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "reducer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "init",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "reduce"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#reverse:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` in reverse order.\n *\n * @remarks\n *\n * This method will buffer _all_ elements of the iteration, and yield them all at once at the end\n *\n * @returns A new {@link PolySyncIterable} that yields the elements of `this` in reverse order\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reverse(): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reverse"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#slice:member(1)",
              "docComment": "/**\n * Return a new iteration that starts from the `start`th element (included) and ends at the `end`th element (excluded) of `this`.\n *\n * @remarks\n *\n * Both `start` and `end` allow for negative values, in which case they refer to the nth-to-last element, with n being the absolute value of the argument. `end` might also be `undefined`, in which case the iteration is not shortened on the end side, yielding up to the end, including the last element. This mimics the behaviour of {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice Array.slice}.\n *\n * This function will likely need a buffer, effectively delaying the yielding of elements for a while.\n *\n * @param start - The index of the first element returned\n *\n * @param end - The index of the first element *not* returned, inclusive\n *\n * @returns a new {@link PolySyncIterable} that yields the elements going that starts from the `start`th element (included) and ends at the `end`th element (excluded) of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "slice(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "slice"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#some:member(1)",
              "docComment": "/**\n * Returns `true` if calling `func(element)` returns `true` for at least one element, and `false` otherwise\n *\n * @remarks\n *\n * If a call to `func(element)` returns `true`, no more elements are iterated.\n *\n * @param func - A function to be called on the elements of the iteration\n *\n * @returns Whether calling `func` returned `true` on at least one element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "some(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "some"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#sort:member(1)",
              "docComment": "/**\n * Return an iteration of the elements of `this` sorted according to `func`\n *\n * @remarks\n *\n * The sort function `func` is used to call {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort} on an array of all the elements. However, the default comparator function will sort elements according to the `<` and `>` operators defined on their own type, of always sorting lexicagraphically like {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort} does.\n *\n * This method will buffer _all_ elements of the iteration, and yield them all at once at the end\n *\n * @param func - A comparator function\n *\n * @returns A new {@link PolySyncIterable} that yields the elements of `this` sorted according to `func`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sort(func?: "
                },
                {
                  "kind": "Reference",
                  "text": "Comparator",
                  "canonicalReference": "polyethylene!Comparator:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "name": "sort"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#take:member(1)",
              "docComment": "/**\n * Return a new iteration that iterates only over the first `num` elements. If there were less than than `num` elements in the iteration, all elements are yielded with no additions.\n *\n * @param num - The number of elements to yield\n *\n * @returns a new {@link PolySyncIterable} that yields the first `num` elements elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "take(num?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "take"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#takeLast:member(1)",
              "docComment": "/**\n * Return a new iteration that iterates only over the last `num` elements. If there were less than than `num` elements in the iteration, all elements are yielded with no additions.\n *\n * @remarks\n *\n * The returned iteration keeps a buffer of `num` elements internally in order to know which elements to keep. and so elements effectively get delayed until the iteration ends.\n *\n * @param num - The number of elements to yield\n *\n * @returns a new {@link PolySyncIterable} that yields the last `num` elements elements of `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "takeLast(num?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "takeLast"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#takeWhile:member(1)",
              "docComment": "/**\n * Return a new iteration that yields the first few elements for which `func(element)` returns `true`.\n *\n * @param func - The function to call on the elements\n *\n * @returns a new {@link PolySyncIterable} that yields the same the elements of `this` as long as `func(element)` returns `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "takeWhile(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "takeWhile"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#tap:member(1)",
              "docComment": "/**\n * Return an iteration of the same elements as `this` after calling `func(element)` for all elements.\n *\n * @param func - A function called for all elements\n *\n * @typeParam U - The return type of `func`\n *\n * @returns A new {@link PolySyncIterable} that yields the same elements as `this`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tap(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedRunnable",
                  "canonicalReference": "polyethylene!IndexedRunnable:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "tap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#toArray:member(1)",
              "docComment": "/**\n * Return an array of all elements of this iteration in the same order that were yielded.\n *\n * @returns An array that contains the same elements as this iteration, in the same order\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray(): "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#toMap:member(1)",
              "docComment": "/**\n * Return a `Map` made from the entries of `this`. This method is roughly equivalent to calling `new Map(iter.toArray())`.\n *\n * @remarks\n *\n * This method is only available for iterations of pairs where the first component is a valid object key type.\n *\n * @returns A `Map` composed of the entries yielded by this iterable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toMap<K, V>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<readonly [K, V]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#toObject:member(1)",
              "docComment": "/**\n * Return an object made from the entries of `this`. This method is roughly equivalent to calling `Object.fromEntires(iter.toArray())`.\n *\n * @remarks\n *\n * This method is only available for iterations of pairs where the first component is a valid object key type.\n *\n * @returns An object composed of the entries yielded by this iterable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObject<K extends "
                },
                {
                  "kind": "Reference",
                  "text": "PropertyKey",
                  "canonicalReference": "!PropertyKey:type"
                },
                {
                  "kind": "Content",
                  "text": ", V>(this: "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<readonly [K, V]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "this",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#toPartitionArrays:member(1)",
              "docComment": "/**\n * Splits this iteration into two arrays, one with elements for which `func(element)` returns `true` (the _truthy elements_) and one for which it returns `false` (the _falsy elements_).\n *\n * @remarks\n *\n * The array of _truthy elements_ has its element type narrowed to the type asserted by `func`.\n *\n * @param func - A function that will be called for all elements to split them into the result arrays\n *\n * @typeParam U - The type asserted by `func`\n *\n * @returns A tuple with the array of values for which `func` returned `true` as the first element, and the array of values for which `func` returned `false` as the second element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPartitionArrays<U extends "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ">(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTypePredicate",
                  "canonicalReference": "polyethylene!IndexedTypePredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<U>, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Exclude",
                  "canonicalReference": "!Exclude:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, U>>]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "U",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toPartitionArrays"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#toPartitionArrays:member(2)",
              "docComment": "/**\n * Splits this iteration into two arrays, one with elements for which `func(element)` returns `true` (the _truthy elements_) and one for which it returns `false` (the _falsy elements_).\n *\n * @param func - A function that will be called for all elements to split them into the result arrays\n *\n * @returns A tuple with the array of values for which `func` returned `true` as the first element, and the array of values for which `func` returned `false` as the second element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toPartitionArrays(func: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedPredicate",
                  "canonicalReference": "polyethylene!IndexedPredicate:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>, "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "toPartitionArrays"
            },
            {
              "kind": "Method",
              "canonicalReference": "polyethylene!PolySyncIterable#unique:member(1)",
              "docComment": "/**\n * Return an iteration of unique elements, where two elements are considered equal if the result of `func(element)` is the same for both elements.\n *\n * @remarks\n *\n * Note that the first element seen with a specific key is always the one yielded, and every other element afterwards is ignored.\n *\n * If no key-mapping function is given, the elements theselves are used as keys. This is likely _not_ what you want in most situations unless elements are primitive types.\n *\n * @param func - A function that returns a _key_ used for uniqueness checks. If not passed, an identitity function is used.\n *\n * @returns A new {@link PolySyncIterable} only elements for which `func(element)` returns a value that hasn't been seen before\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unique(func?: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedMapping",
                  "canonicalReference": "polyethylene!IndexedMapping:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, unknown>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PolySyncIterable",
                  "canonicalReference": "polyethylene!default:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": true
                }
              ],
              "name": "unique"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        }
      ]
    }
  ]
}
